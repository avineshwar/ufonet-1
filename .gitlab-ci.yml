image: docker:stable

services:
  - docker:dind

stages:
  - build
  - test
  - staging
  - deploy

before_script:
  - echo -e '\033[36;1m ******* DOCKER LOGIN REGISTRY ******** \033[0m'
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* BUILD ******** \033[0m'
    - docker build -t ${CI_PROJECT_NAME} .
  only:
    - dev

code_quality:
  stage: test
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* CODE QUALITY ******** \033[0m'
    - export SP_VERSION=$(echo "${CI_SERVER_VERSION}" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run --rm
        --env SOURCE_CODE="${PWD}"
        --volume ${PWD}:/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:${VERSION:-latest}" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  only:
    - dev

container_scanning:
  stage: test
  allow_failure: false
  variables:
    CLAIR_LOCAL_SCAN_VERSION: v2.0.8_fe9b059d930314b54c78f75afe265955faf4fdc1
  script:
    - echo -e '\033[36;1m ******* CONTAINER SCANNING ******** \033[0m'
    - docker run --rm -d --name db arminc/clair-db:latest
    - docker run -d
        -p 6060:6060
        --link db:postgres
        --name clair
        --restart on-failure
        arminc/clair-local-scan:${CLAIR_LOCAL_SCAN_VERSION}
    - apk add -U wget ca-certificates
    - docker build -t ${CI_PROJECT_NAME} .
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_PROJECT_NAME} || true
  artifacts:
    paths: [gl-container-scanning-report.json]
  only:
    - dev

sast:
  stage: test
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* SAST ******** \033[0m'
    - export SP_VERSION=$(echo "${CI_SERVER_VERSION}" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run --rm
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume ${PWD}:/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:${SP_VERSION}" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]
  only:
    - dev

license_management:
  stage: test
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* LICENSE MANAGEMENT ******** \033[0m'
    - export LICENSE_MANAGEMENT_VERSION=$(echo "${CI_SERVER_VERSION}" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run --rm
        --volume ${PWD}:/code
        "registry.gitlab.com/gitlab-org/security-products/license-management:${LICENSE_MANAGEMENT_VERSION}" analyze /code
  artifacts:
    paths: [gl-license-management-report.json]
  only:
    - dev

test_app:
  stage: test
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* TEST APP ******** \033[0m'
    - docker build -t ${CI_PROJECT_NAME} .
    - docker run --rm ${CI_PROJECT_NAME}
        ./ufonet --version
  only:
    - dev

open_merge:
  stage: staging
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* OPEN MERGE REQUEST ******** \033[0m'
    - docker run --rm
        --env CI_PROJECT_ID=${CI_PROJECT_ID}
        --env CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}
        --env CI_DEFAULT_BRANCH=${CI_DEFAULT_BRANCH}
        --env GITLAB_USER_ID=${GITLAB_USER_ID}
        --env PRIVATE_TOKEN=${PRIVATE_TOKEN}
        alexandreoda/gitlab_auto_merge_requests
        bash auto_merge_requests.sh --open
  only: 
    - dev

enable_merge:
  stage: deploy
  allow_failure: false
  script:
    - echo -e '\033[36;1m ******* ENABLE MERGE WHEN PIPELINE SUCCEEDS ******** \033[0m'
    - docker run --rm
        --env CI_PROJECT_ID=${CI_PROJECT_ID}
        --env CI_MERGE_REQUEST_IID=${CI_MERGE_REQUEST_IID}
        --env PRIVATE_TOKEN=${PRIVATE_TOKEN}
        alexandreoda/gitlab_auto_merge_requests
        bash auto_merge_requests.sh --enable
  only: 
    - merge_requests

deploy:
  stage: deploy
  script:
    - echo -e '\033[36;1m ******* DEPLOYMENT FINISHED SUCCESSFULLY ******** \033[0m'
  only: 
    - master
